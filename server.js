 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var router = express.Router();
var ua_parse = require('user-agent-parser');

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}
app.use('/public', express.static(process.cwd() + '/public'));
app.set("views",__dirname+"/views")
app.set("view engine","pug")
app.route('/')
    .get(function(req, res) {
  const example_response = {"ipaddress":"127.0.0.1","Operating System":"Windows NT 10.0 amd64","language":"en-US","software":"<user-agent>"}
  const template_values = {
    "example":
      {"input":[req.headers.host+"/api/whoami"],
      "output":[JSON.stringify(example_response)]}
  }
		  res.render("index",template_values)
})

// app.route('/_api/package.json')
//   .get(function(req, res, next) {
//     console.log('requested');
//     fs.readFile(__dirname + '/package.json', function(err, data) {
//       if(err) return next(err);
//       res.type('txt').send(data.toString());
//     });
//   });
router.get('/api/whoami',function(req,res){
  const ua_parser = new ua_parse();
  ua_parser.setUA(req.headers['user-agent'])
  
  const response = {
    "ipaddress":req.headers['x-forwarded-for'].split(",")[0],
    "Operating System":ua_parser.getOS().name+" "+ua_parser.getOS().version+" "+ua_parser.getCPU().architecture,
    "language":req.headers["accept-language"].split(",")[0],
    "software":req.headers['user-agent']
  }
  res.json(response)
}) 
app.use('/', router)

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});


// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

